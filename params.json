{"name":"Pipajs","tagline":"PIPA is a router and middleware extensions for ExpressJS","body":"# PIPA\r\n\r\n> PIPA is a router and middleware extensions for ExpressJS.\r\n\r\n### Why PIPA\r\n\r\n> The idea of PIPA is about how to create ExpressJS router in an easy-way, readable and the middleware to be re-usable.\r\n\r\n### Installation\r\n\r\n```bash\r\n$ npm install pipa\r\n```\r\n\r\n### How-To\r\n\r\nThere are two ways in how to use PIPA, `simple-mode` and `advance-mode`.\r\n#### How-To-Simple-Mode\r\n1 - Create your Express app and add PIPA.\r\n```js\r\nvar express = require('express')\r\nvar app = express()\r\nvar Pipa = require('pipa');\r\n\r\n// Pipa\r\n// @param   object      Express app\r\n// @param   string      Router folder\r\n// @param   string      Middleware folder\r\n\r\nvar pipa = new Pipa(app, 'router', 'middleware');\r\npipa.open();\r\n\r\napp.listen(3000);\r\n```\r\n2 - Create a middleware folder\r\n```bash\r\n$ mkdir middleware && cd middlware\r\n```\r\n3 - Create a middleware file: `Index.js`\r\n```bash\r\n$ vi Index.js\r\n```\r\n4 - Add a `showIndex` function to `Index.js`\r\n```js\r\nmodule.exports = {\r\n    showIndex: function (req, res, next) {\r\n        res.json({ message: 'Hello world PIPA!' });\r\n    }\r\n};\r\n```\r\n5 - Create a router folder in your folder project\r\n```bash\r\n$ mkdir router && cd router\r\n```\r\n6 - Afterward, create a route file: `index.json`\r\n```bash\r\n$ vi Index.json\r\n```\r\n7 - Add a http method, url path and also the middleware name to handle the request\r\n```json\r\n{\r\n    \"GET /\": \"Index.showIndex\"\r\n}\r\n```\r\n> Explanation:\r\n> `GET /` means `app.get('/', ...);`, you can also use `POST`, `PUT` and `DELETE` methods.\r\n\r\n> Explanation:\r\n> The `Index.showIndex` means that it will execute `showIndex` function \r\n> in `Index.js` file under the middleware folder that we have created previously.\r\n\r\n> Explanation:\r\n> The `Index.json` will automatically translated into `/` (root url path). \r\n> For example, if you want to create a `/user` url path, you only need to create a `User.json` route file. So all routes inside `User.json` file will be able to be accessed under the `/user` url path, e.g. `GET /:id`, you can access it by `/user/:id`\r\n\r\n8 - Now run your application by executing `node app.js` and access `http://localhost:8000/` in your favorite browser.\r\n\r\n#### How-To-Advance-Mode\r\n\r\nIn `advance-mode`, we will try to separate `base url path` and `api url path`. The `router` folder will look like below.\r\n```bash\r\nrouter/\r\n    |- api/\r\n        |- v1\r\n            |- User.json\r\n            |- History.json\r\n        |- v1.2\r\n            |- User.json\r\n    |- Index.json\r\n    |- User.json\r\n```\r\n> Explanation: According to folder structure above, PIPA will automatically generate several endpoints as below.\r\n\r\n`API`\r\n- /api/v1/user\r\n- /api/v1/history\r\n- /api/v1.2/user\r\n\r\n`BASE`\r\n- /\r\n- /user\r\n\r\nYou can also use multiple middleware. For example, you want to get current user profile and need to check whether the request is authorized. The `req.pipa` object will come to rescue :D\r\n\r\nIn `/api/v1/User.json` router file, please add :\r\n```json\r\n{\r\n    \"GET /me\": [\r\n        \"Auth.ensureAuth\",\r\n        \"User.getProfile\"\r\n    ]\r\n}\r\n```\r\nCreate a new middleware file `Auth.js`\r\n```js \r\nmodule.exports = {\r\n    ensureAuth: function (req, res, next) {\r\n        // Check whether there's an `access_token` in the request\r\n        if (!req.query.access_token) \r\n            return res.status(401).json({ code: 401, status: 'error', message: 'You are not authorized' });\r\n        \r\n        // Do some access token checking and pass it to the next middleware\r\n        next({ access_token: req.query.access_token, access_token_status: true });\r\n    }\r\n}\r\n```\r\nAfterward, in `User.js` middleware file, you can get the previous data by accessing the `req.pipa` object\r\n```js \r\nmodule.exports = {\r\n    getProfile: function (req, res, next) {\r\n        if (!req.pipa.access_token_status)\r\n            return res.status(500).json({ code: 500, status: 'error', message: 'access_token is not valid.' });\r\n            \r\n        // Get user profile based on `access_token` which you can get from `req.pipa.access_token`\r\n        res.status(200).json({ code: 200, status: 'success', data: { user: { `user object` } });\r\n    }\r\n}\r\n```\r\n\r\n### Code Sample\r\n\r\nYou can try to run the code sample in `sample` folder.\r\n\r\n### Contact\r\n\r\nIf you have any questions, feedback, idea or anything, please drop me a message at `madebyais@gmail.com`\r\n\r\n### License\r\n\r\n  [MIT](LICENSE) Copyright Â© 2015 Faris\r\n","google":"UA-70849830-1","note":"Don't delete this file! It's used internally to help with page regeneration."}